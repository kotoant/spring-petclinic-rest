openapi: 3.0.1
info:
  title: Spring PetClinic
  description: Spring PetClinic Sample Application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: '1.0'
servers:
  - url: http://localhost:8080/api
tags:
  - name: owner
    description: Endpoints related to pet owners.
  - name: pet
    description: Endpoints related to pets.
  - name: visit
    description: Endpoints related to vet visits.
paths:
  /owners:
    post:
      tags:
        - owner
      operationId: addOwner
      summary: Adds a pet owner
      description: Records the details of a new pet owner.
      requestBody:
        description: The pet owner
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerFields'
        required: true
      responses:
        201:
          description: The pet owner was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    get:
      tags:
        - owner
      operationId: listOwners
      summary: Lists pet owners
      description: Returns an array of pet owners.
      parameters:
        - name: lastName
          in: query
          description: Last name.
          required: false
          schema:
            type: string
            example: Davis
        - name: lastId
          in: query
          description: Last id to seek after.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
            default: 0
        - name: pageSize
          in: query
          description: Page size.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 20
            example: 10
            default: 10
      responses:
        200:
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Owner'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /owners/{ownerId}:
    get:
      tags:
        - owner
      operationId: getOwner
      summary: Get a pet owner by ID
      description: Returns the pet owner or a 404 error.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the pet owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Owner not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    put:
      tags:
        - owner
      operationId: updateOwner
      summary: Update a pet owner's details
      description: Updates the pet owner record with the specified details.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the pet owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The pet owner details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerFields'
        required: true
      responses:
        200:
          description: Update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Owner not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

    delete:
      tags:
        - owner
      operationId: deleteOwner
      summary: Delete an owner by ID
      description: Returns the owner or a 404 error.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Owner  not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /owners/{ownerId}/pets:
    post:
      tags:
        - pet
      operationId: addPetToOwner
      summary: Adds a pet to an owner
      description: Records the details of a new pet.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the pet owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The details of the new pet.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetFields'
        required: true
      responses:
        201:
          description: The pet was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /owners/{ownerId}/pets/{petId}:
    get:
      tags:
        - pet
      operationId: getOwnersPet
      summary: Get a pet by ID
      description: Returns the pet or a 404 error.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the pet owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
        - name: petId
          in: path
          description: The ID of the pet.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Pet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    put:
      tags:
        - pet
      operationId: updateOwnersPet

      summary: Update a pet's details
      description: Updates the pet record with the specified details.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the pet owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
        - name: petId
          in: path
          description: The ID of the pet.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The pet details to use for the update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetFields'
        required: true
      responses:
        204:
          description: Update successful.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet not found for this owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /owners/{ownerId}/pets/{petId}/visits:
    post:
      tags:
        - visit
      operationId: addVisitToOwner
      summary: Adds a vet visit
      description: Records the details of a new vet visit.
      parameters:
        - name: ownerId
          in: path
          description: The ID of the pet owner.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
        - name: petId
          in: path
          description: The ID of the pet.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The details of the new vet visit.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisitFields'
        required: true
      responses:
        201:
          description: The vet visit was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet not found for this owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /pettypes:
    get:
      tags:
        - pettypes
      operationId: listPetTypes
      summary: Lists pet types
      description: Returns an array of pet types.
      parameters:
        - name: lastId
          in: query
          description: Last id to seek after.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
            default: 0
        - name: pageSize
          in: query
          description: Page size.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 20
            example: 10
            default: 10
      responses:
        200:
          description: Pet types found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    post:
      tags:
        - pettypes
      operationId: addPetType
      summary: Create a pet type
      description: Creates a pet type .
      requestBody:
        description: The pet type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetTypeFields'
        required: true
      responses:
        200:
          description: Pet type created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet Type not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /pettypes/{petTypeId}:
    get:
      tags:
        - pettypes
      operationId: getPetType
      summary: Get a pet type by ID
      description: Returns the pet type or a 404 error.
      parameters:
        - name: petTypeId
          in: path
          description: The ID of the pet type.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Pet type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet Type not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    put:
      tags:
        - pettypes
      operationId: updatePetType
      summary: Update a pet type by ID
      description: Returns the pet type or a 404 error.
      parameters:
        - name: petTypeId
          in: path
          description: The ID of the pet type.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The pet type
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetTypeFields'
        required: true
      responses:
        200:
          description: Pet type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetType'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet Type not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    delete:
      tags:
        - pettypes
      operationId: deletePetType
      summary: Delete a pet type by ID
      description: Returns the pet type or a 404 error.
      parameters:
        - name: petTypeId
          in: path
          description: The ID of the pet type.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet type not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /pets:
    get:
      tags:
        - pet
      operationId: listPets
      summary: Lists pet
      description: Returns an array of pet .
      parameters:
        - name: lastId
          in: query
          description: Last id to seek after.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
            default: 0
        - name: pageSize
          in: query
          description: Page size.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 20
            example: 10
            default: 10
      responses:
        200:
          description: Pet types found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    post:
      tags:
        - pet
      operationId: addPet
      summary: Create a pet
      description: Creates a pet .
      requestBody:
        description: The pet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        200:
          description: Pet type created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /pets/{petId}:
    get:
      tags:
        - pet
      operationId: getPet
      summary: Get a pet by ID
      description: Returns the pet  or a 404 error.
      parameters:
        - name: petId
          in: path
          description: The ID of the pet.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Pet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    put:
      tags:
        - pet
      operationId: updatePet
      summary: Update a pet by ID
      description: Returns the pet or a 404 error.
      parameters:
        - name: petId
          in: path
          description: The ID of the pet.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The pet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetFields'
        required: true
      responses:
        200:
          description: Pet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    delete:
      tags:
        - pet
      operationId: deletePet
      summary: Delete a pet by ID
      description: Returns the pet or a 404 error.
      parameters:
        - name: petId
          in: path
          description: The ID of the pet.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Pet not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /visits:
    get:
      tags:
        - visit
      operationId: listVisits
      summary: Lists visits
      description: Returns an array of visit .
      parameters:
        - name: lastId
          in: query
          description: Last id to seek after.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 0
            default: 0
        - name: pageSize
          in: query
          description: Page size.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 20
            example: 10
            default: 10
      responses:
        200:
          description: visits found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visit'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    post:
      tags:
        - visit
      operationId: addVisit
      summary: Create a visit
      description: Creates a visit.
      requestBody:
        description: The visit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visit'
        required: true
      responses:
        200:
          description: visit created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Visit not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
  /visits/{visitId}:
    get:
      tags:
        - visit
      operationId: getVisit
      summary: Get a visit by ID
      description: Returns the visit or a 404 error.
      parameters:
        - name: visitId
          in: path
          description: The ID of the visit.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        200:
          description: Visit details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Visit not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    put:
      tags:
        - visit
      operationId: updateVisit
      summary: Update a visit by ID
      description: Returns the visit or a 404 error.
      parameters:
        - name: visitId
          in: path
          description: The ID of the visit.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      requestBody:
        description: The visit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisitFields'
        required: true
      responses:
        200:
          description: Visit details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Visit not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
    delete:
      tags:
        - visit
      operationId: deleteVisit
      summary: Delete a visit by ID
      description: Returns the visit or a 404 error.
      parameters:
        - name: visitId
          in: path
          description: The ID of the visit.
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 1
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Visit not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /sleep:
    get:
      tags:
        - sleep
      operationId: sleep
      summary: Sleep
      description: Sleep.
      parameters:
        - name: times
          in: query
          description: Number of times to sleep.
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
            default: 1
        - name: millis
          in: query
          description: Number of milliseconds to sleep.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 100
            default: 100
        - name: zip
          in: query
          description: Whether to use Mono.zip.
          required: false
          schema:
            type: boolean
            example: true
            default: true
      responses:
        200:
          description: Sleep successful.
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /sleep-and-fetch:
    get:
      tags:
        - sleep
      operationId: sleep-and-fetch
      summary: sleep-and-fetch
      description: Sleep and fetch.
      parameters:
        - name: times
          in: query
          description: Number of times to sleep.
          required: false
          schema:
            type: integer
            minimum: 1
            example: 1
            default: 1
        - name: millis
          in: query
          description: Number of milliseconds to sleep.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 100
            default: 100
        - name: strings
          in: query
          description: Number of strings to fetch.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 100
            default: 100
        - name: length
          in: query
          description: Length of strings to fetch.
          required: false
          schema:
            type: integer
            minimum: 0
            example: 100
            default: 100
      responses:
        200:
          description: Sleep and fetch.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

components:
  schemas:
    ProblemDetail:
      type: object
    OwnerFields:
      title: Owner fields
      description: Editable fields of a pet owner.
      type: object
      properties:
        firstName:
          title: First name
          description: The first name of the pet owner.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: George
        lastName:
          title: Last name
          description: The last name of the pet owner.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: Franklin
        address:
          title: Address
          description: The postal address of the pet owner.
          type: string
          minLength: 1
          maxLength: 255
          example: '110 W. Liberty St.'
        city:
          title: City
          description: The city of the pet owner.
          type: string
          minLength: 1
          maxLength: 80
          example: Madison
        telephone:
          title: Telephone number
          description: The telephone number of the pet owner.
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]*$'
          example: '6085551023'
      required:
        - firstName
        - lastName
        - address
        - city
        - telephone
    Owner:
      title: Owner
      description: A pet owner.
      allOf:
        - $ref: '#/components/schemas/OwnerFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the pet owner.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            pets:
              title: Pets
              description: The pets owned by this individual including any booked vet visits.
              type: array
              items:
                $ref: '#/components/schemas/Pet'
              readOnly: true
          required:
            - pets
    PetFields:
      title: Pet fields
      description: Editable fields of a pet.
      type: object
      properties:
        name:
          title: Name
          description: The name of the pet.
          type: string
          maxLength: 30
          example: Leo
        birthDate:
          title: Birth date
          description: The date of birth of the pet.
          type: string
          format: date
          example: '2010-09-07'
        type:
          $ref: '#/components/schemas/PetType'
      required:
        - name
        - birthDate
        - type
    Pet:
      title: Pet
      description: A pet.
      allOf:
        - $ref: '#/components/schemas/PetFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the pet.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            ownerId:
              title: Owner ID
              description: The ID of the pet's owner.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            visits:
              title: Visits
              description: Vet visit bookings for this pet.
              type: array
              items:
                $ref: '#/components/schemas/Visit'
              readOnly: true
          required:
            - id
            - type
            - visits
    VisitFields:
      title: Visit fields
      description: Editable fields of a vet visit.
      type: object
      properties:
        date:
          title: Date
          description: The date of the visit.
          type: string
          format: date
          example: '2013-01-01'
        description:
          title: Description
          description: The description for the visit.
          type: string
          minLength: 1
          maxLength: 255
          example: 'rabies shot'
      required:
        - date
        - description
    Visit:
      title: Visit
      description: A booking for a vet visit.
      allOf:
        - $ref: '#/components/schemas/VisitFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the visit.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            petId:
              title: Pet ID
              description: The ID of the pet.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
          required:
            - id
    PetTypeFields:
      title: PetType fields
      description: Editable fields of a pet type.
      type: object
      properties:
        name:
          title: Name
          description: The name of the pet type.
          type: string
          maxLength: 80
          minLength: 1
          example: cat
      required:
        - name
    PetType:
      title: Pet type
      description: A pet type.
      allOf:
        - $ref: '#/components/schemas/PetTypeFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the pet type.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
          required:
            - id
