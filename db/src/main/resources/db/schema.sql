--liquibase formatted sql

--changeset Anton.Kotov:schema runAlways:true runOnChange:true endDelimiter:\ contextFilter:schema
drop table if exists vets cascade\
drop table if exists specialties cascade\
drop table if exists vet_specialties cascade\
drop table if exists types cascade\
drop table if exists owners cascade\
drop table if exists pets cascade\
drop table if exists visits cascade\

CREATE TABLE IF NOT EXISTS vets
(
    id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name TEXT,
    last_name  TEXT
)\
CREATE INDEX ON vets (last_name)\

CREATE TABLE IF NOT EXISTS specialties
(
    id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT
)\
CREATE INDEX ON specialties (name)\

CREATE TABLE IF NOT EXISTS vet_specialties
(
    vet_id       INT NOT NULL REFERENCES vets (id),
    specialty_id INT NOT NULL REFERENCES specialties (id),
    UNIQUE (vet_id, specialty_id)
)\

CREATE TABLE IF NOT EXISTS types
(
    id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT
)\
CREATE INDEX ON types (name)\

CREATE TABLE IF NOT EXISTS owners
(
    id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name TEXT,
    last_name  TEXT,
    address    TEXT,
    city       TEXT,
    telephone  TEXT
)\
CREATE INDEX ON owners (last_name)\

CREATE TABLE IF NOT EXISTS pets
(
    id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name       TEXT,
    birth_date DATE,
    type_id    INT NOT NULL REFERENCES types (id),
    owner_id   INT REFERENCES owners (id)
)\
CREATE INDEX ON pets (name)\
CREATE INDEX ON pets (owner_id)\

CREATE TABLE IF NOT EXISTS visits
(
    id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pet_id      INT REFERENCES pets (id),
    visit_date  DATE,
    description TEXT
);
CREATE INDEX ON visits (pet_id)\

-- Get a random string
--
-- source : https://github.com/rodo/articles/blob/main/postgresql-random-functions/get_random_string.sql
--
CREATE OR REPLACE FUNCTION get_random_string(
    IN string_length INTEGER,
    IN possible_chars TEXT
        DEFAULT '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
) RETURNS text
    LANGUAGE plpgsql
AS $$
DECLARE
    output TEXT = '';
    i INT4;
    pos INT4;
BEGIN
    FOR i IN 1..string_length LOOP
            pos := 1 + CAST( random() * ( LENGTH(possible_chars) - 1) AS INT4 );
            output := output || substr(possible_chars, pos, 1);
        END LOOP;
    RETURN output;
END;
$$\

CREATE
    OR REPLACE FUNCTION sleep_and_fetch(
        seconds DOUBLE PRECISION,
        strings INTEGER,
        string_length INTEGER
    )
    RETURNS TABLE (
        string TEXT
    )
    LANGUAGE plpgsql
AS
$$
BEGIN
    PERFORM pg_sleep(seconds);
    RETURN QUERY SELECT get_random_string(string_length)
                 FROM generate_series(1, strings);
END;
$$\
--rollback select 1;
